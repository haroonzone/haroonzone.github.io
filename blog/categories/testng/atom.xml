<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testng | Pragmatic QA]]></title>
  <link href="http://pragmaticqa.co.uk/blog/categories/testng/atom.xml" rel="self"/>
  <link href="http://pragmaticqa.co.uk/"/>
  <updated>2014-07-24T16:55:37+01:00</updated>
  <id>http://pragmaticqa.co.uk/</id>
  <author>
    <name><![CDATA[Haroon Rasheed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Track Your Tests With Cuanto]]></title>
    <link href="http://pragmaticqa.co.uk/track-your-tests-with-cuanto"/>
    <updated>2011-03-10T00:00:00+00:00</updated>
    <id>http://pragmaticqa.co.uk/track-your-tests-with-cuanto</id>
    <content type="html"><![CDATA[<p>How often a developer has come to you and asked the following questions about a test failure.</p>

<ul>
<li>When it started failing?</li>
<li>Was it failing for the same reason before?</li>
</ul>


<p>How do you then start looking at the previous test runs? Do you perform complex SQL to get this information out of a database if you are logging results there, or do you go through different builds in the CI tools to find this information?</p>

<!-- more -->


<p>In reality if you are doing extensive UI test automation using any tool like Selenium, Watir or Sahi. You will have some test failures that are either due to the environment being slow or some particular service not running in a complex system, and even sometimes the application wont respond in time no matter how intelligent your test scripts are without using the hard coded wait statements.</p>

<p>Also Continuous integration tools are great and generate very good HTML reports but those HTML reports are tied to a build. It is not easy to navigate through each build and open up the test report to see the history of a particular test method, let alone verify the reason for the test failure.</p>

<p>Beside this, once you have the HTML reports from the test run, you cannot store any analytical information about that test run anywhere until I found a very good tool for doing all this and much more. The name of the tool is <a href="http://www.trackyourtests.com/"> Cuanto </a></p>

<p>I will go through the main features of Cuanto here and how we can use it to track TestNG tests. Cuanto supports TestNG, JUnit , NUnit and Manual test tracking, but I will go through the TestNG tests tracking. I have written a custom TestNG listener that uses Cuanto API to log the test results at the run-time. You can find more information about this listener on my <a href="https://github.com/haroonzone/cuanto-testng-listener">GitHub Repo</a></p>

<p>When you run the tests using the TestNG listener, then you can analyse the test results using cuanto as follows.</p>

<p>Go to the Cuanto URL in my case it is <a href="http://localhost:8080/cuanto">http://localhost:8080/cuanto</a>
You will see the test run information as below.</p>

<p><img src="/images/test_run.png" width="1000" height="490"></p>

<p>This would show all the test runs for your project, now if you click on the first test run. It will open the view with all the tests that are run as part of this test run as shown below.</p>

<p><img src="/images/test_outcome.png" width="1000" height="350"></p>

<p>In this view, you have all the useful information about your tests such as test history, output, reason for the test failure. It also indicates if there is a new failure.</p>

<p>When you click the History icon for any test method, then you will be able to view the historic information about the tests as how often this test have failed and what was the reason for the failure each time.</p>

<p>You can sort the tests based on the duration and it would help you in identifying you slow tests easily then you can make informed decision about these tests.</p>

<p>There is much more to Cuanto then this and it has the potential to become a very useful repository for the historical information about your tests.
You can find out more about Cuanto on their website. They are working on a new Cuanto 2.8.0 version which is in beta at the moment. I have not looked at the change log but it is encouraging that people are still working on it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AbstractTestNGSpringContextTests and TestNG @BeforeSuite]]></title>
    <link href="http://pragmaticqa.co.uk/abstracttestngspringcontexttests-and-testng-beforesuite"/>
    <updated>2010-10-05T00:00:00+01:00</updated>
    <id>http://pragmaticqa.co.uk/abstracttestngspringcontexttests-and-testng-beforesuite</id>
    <content type="html"><![CDATA[<p>We are using Spring 2.5, TestNG and Selenium RC for our functional tests. In out test base class we are using @BeforeClass to get the new browser session from Selenium Server. Today I wanted to replace @BeforeClass with @BeforeSuite annotation, so that we only launch browser before running the test suite and this browser session would be shared among the tests thus reducing the test execution time.</p>

<p>I thought it to be a straight forward task by just replacing the @BeforeClass with the @BeforeSuite annotation, because these annotations are already provided by TestNG.</p>

<p>But when I did that I got null pointer exceptions all over the place, the code was complaining about the classes instantiated via Spring Application Context being null, and when I looked at the AbstractTestNGSpringContextTests implementation I found that AbstractTestNGSpringContextTestsâ€™s springTestContextPrepareTestInstance() method is currently annotated with @BeforeClass, which does not allow @BeforeSuite methods in subclasses from interacting with the ApplicationContext.</p>

<p>To overcome this problem, you can override the springTestContextPrepareTestInstance() method in your subclass as follows.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang: java</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@BeforeSuite(alwaysRun = true)
</span><span class='line'>@BeforeClass(alwaysRun = true)
</span><span class='line'>@BeforeTest(alwaysRun = true)
</span><span class='line'>@Override
</span><span class='line'>protected void springTestContextPrepareTestInstance() throws Exception {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    super.springTestContextPrepareTestInstance();
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use of Hamcrest for Test Assertions]]></title>
    <link href="http://pragmaticqa.co.uk/use-of-hamcrest-for-test-assertions"/>
    <updated>2010-09-04T00:00:00+01:00</updated>
    <id>http://pragmaticqa.co.uk/use-of-hamcrest-for-test-assertions</id>
    <content type="html"><![CDATA[<p>I was recently introduced to <a href="http://code.google.com/p/hamcrest/wiki/Tutorial">hamcrest</a> (an open source matcher library). I was really impressed by the declarative nature of the match rules. We use TestNG to drive the Selenium Tests and naturally we are using TestNG assertions within our tests. Some of the TestNG assertions in our tests are as follows.</p>

<pre><code>assertEqual (thePage.getLinkCount(), 10, "Link count on the page");
assertTrue (thePage.isLinkPresent(), "Link 1 is present.")
</code></pre>

<p>The equivalent assertions using hamcrest would be as follows.</p>

<pre><code>assertThat("Link count on the page", thePage.getLinkCount(), equalTo(10));
assertThat("Link 1 is present", theBiscuit.isLinkPresent(), is(true));
</code></pre>

<p>You can see that the hamcrest matchers are more expressive and readable in the code. Another benfit of using hamcrest is that you can write custom matchers easily. e.g. you want to write an assertion in the test that checks that you have more than 20 items in your list and the item count is an even number.</p>

<pre><code>assertThat ("Country item count", countryList.getCount(), allOf(greaterThan(20), evenNumber()));
</code></pre>

<p>It is easy to write and much more readable in the tests and if the test fails then it gives a clear description of the failure. Another benefit of using hamcrest is that you as a test developer does not have to worry about the different in the method signature for TestNG and JUnit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tellurium TestNG Archetype; an Easy Approach to Get Started With Tellurium]]></title>
    <link href="http://pragmaticqa.co.uk/tellurium-testng-archetype-an-easy-approach-to-get-started-with-tellurium"/>
    <updated>2010-05-20T00:00:00+01:00</updated>
    <id>http://pragmaticqa.co.uk/tellurium-testng-archetype-an-easy-approach-to-get-started-with-tellurium</id>
    <content type="html"><![CDATA[<p>I will be writing more about <a href="http://code.google.com/p/aost">Tellurium</a> in the near future. I have not been spending that much time on <a href="http://code.google.com/p/aost">Tellurium</a> these days as I would have liked to, and the team has done an incredible job in releasing <a href="http://code.google.com/p/aost">Tellurium 0.7.0</a> with many exciting new features.</p>

<p>It was easy to pick this topic as a starting point to familiarize myself with the new features in <a href="http://code.google.com/p/aost">Tellurium</a> as I go along exploring.</p>

<p>We will be creating a new <a href="http://code.google.com/p/aost">Tellurium</a> project by making use of the Tellurium TestNG Archetype. This is an easy and quick way to get yourself started with <a href="http://code.google.com/p/aost">Tellurium</a>.</p>

<p>Tellurium includes two maven archetypes, i.e., tellurium-junit-archetype and tellurium-testng-archetype for Tellurium JUnit test project and Tellurium TestNG test project, respectively.</p>

<!-- more -->


<p>The first step is to modify or create your maven setting.xml file to allow you to automatically include <a href="http://code.google.com/p/aost">Tellurium</a> artifacts in your Maven project.
This should go in your_home/.m2/settings.xml file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang: xml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;settings>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;profiles&gt;
</span><span class='line'>    &lt;profile&gt;
</span><span class='line'>        &lt;activation&gt;
</span><span class='line'>            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
</span><span class='line'>        &lt;/activation&gt;
</span><span class='line'>        &lt;repositories&gt;
</span><span class='line'>             &lt;repository&gt;
</span><span class='line'>                &lt;id&gt;kungfuters-public-snapshots-repo&lt;/id&gt;
</span><span class='line'>                &lt;name&gt;Kungfuters.org Public Snapshot Repository&lt;/name&gt;
</span><span class='line'>                &lt;releases&gt;
</span><span class='line'>                    &lt;enabled&gt;false&lt;/enabled&gt;
</span><span class='line'>                &lt;/releases&gt;
</span><span class='line'>                &lt;snapshots&gt;
</span><span class='line'>                    &lt;enabled&gt;true&lt;/enabled&gt; 
</span><span class='line'>                &lt;/snapshots&gt;
</span><span class='line'>                &lt;url&gt;http://maven.kungfuters.org/content/repositories/snapshots&lt;/url&gt;
</span><span class='line'>            &lt;/repository&gt;
</span><span class='line'>            &lt;repository&gt;
</span><span class='line'>                &lt;id&gt;kungfuters-public-releases-repo&lt;/id&gt;
</span><span class='line'>                &lt;name&gt;Kungfuters.org Public Releases Repository&lt;/name&gt;
</span><span class='line'>                &lt;releases&gt;
</span><span class='line'>                    &lt;enabled&gt;true&lt;/enabled&gt; 
</span><span class='line'>                &lt;/releases&gt;
</span><span class='line'>                &lt;snapshots&gt;
</span><span class='line'>                    &lt;enabled&gt;false&lt;/enabled&gt;
</span><span class='line'>                &lt;/snapshots&gt;
</span><span class='line'>                &lt;url&gt;http://maven.kungfuters.org/content/repositories/releases&lt;/url&gt;
</span><span class='line'>            &lt;/repository&gt; 
</span><span class='line'>        &lt;/repositories&gt;
</span><span class='line'>    &lt;/profile&gt;
</span><span class='line'>&lt;/profiles&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/settings></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, run the following maven command to create your new project</p>

<pre><code>mvn archetype:create -DgroupId=your_group_id \
                     -DartifactId=your_artifact_id \
                     -DarchetypeArtifactId=tellurium-testng-archetype \
                     -DarchetypeGroupId=tellurium \
                     -DarchetypeVersion=0.6.0
</code></pre>

<p>Without adding the <a href="http://code.google.com/p/aost">Tellurium</a> Maven repository, you can specify it in the command line as</p>

<pre><code>mvn archetype:create -DgroupId=your_group_id \
                     -DartifactId=your_artifact_id \
                     -DarchetypeArtifactId=tellurium-testng-archetype \
                     -DarchetypeGroupId=tellurium \
                     -DarchetypeVersion=0.6.0 \
                     -DarchetypeRepository=http://maven.kungfuters.org/content/repositories/releases
</code></pre>

<p>But you still need to put the <a href="http://code.google.com/p/aost">Tellurium</a> repository into your settings.xml later since the Tellurium test project needs to download other <a href="http://code.google.com/p/aost">Tellurium</a> artifacts from the repository, for example, the <a href="http://code.google.com/p/aost">tellurium</a> core jar file.</p>

<p>After the project is created, you will find the following files</p>

<pre><code>pom.xml
src
src/main
src/main/groovy
src/main/resources
src/test
src/test/groovy
src/test/groovy/module
src/test/groovy/module/GoogleSearchModule.groovy
src/test/groovy/test
src/test/groovy/test/GoogleSearchTestCase.java
src/test/resources
TelluriumConfig.groovy
</code></pre>

<p>You should use your IDE to open the project, for example, in IntelliJ IDEA, do the following steps</p>

<p><strong>New Project > Import project from external model > Maven > Project directory > Finish</strong></p>

<p>You will open up a Maven project and make sure you are using Groovy 1.6.0 in your project. After that, compile the project and run the example test GoogleSearchTestCase.</p>

<p>If you want to run the tests in command line, you can use the following command</p>

<pre><code>mvn clean test
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a Test Project With Selenium, TestNG and Maven]]></title>
    <link href="http://pragmaticqa.co.uk/setting-up-a-test-project-with-selenium-testng-and-maven"/>
    <updated>2010-05-20T00:00:00+01:00</updated>
    <id>http://pragmaticqa.co.uk/setting-up-a-test-project-with-selenium-testng-and-maven</id>
    <content type="html"><![CDATA[<p>It is useful to Selenium and TestNG using an IDE, but in the real world projects are not restricted to the use of IDE. Projects need build tools like ANT or MAVEN to compile, install, deploy and run the application.</p>

<p>I am involved in couple of projects that use Maven as the build tool, although Maven is more than just the build tool. It covers the complete life-cycle of the project and testing is a pivotal part in project life-cycle especially for projects that tend to follow TDD and Acceptance Test Driven Development.</p>

<p>In order to achieve this you need to install java and maven2 on your machine. Make sure that you have set the JDK_HOME and M2_HOME directory correctly.</p>

<p>Once you have done this, you can open a terminal on your screen and go to your default workspace or the directory where you want to create the project.</p>

<!-- more -->


<p>To create a maven project, execute the following.
  mvn archetype:create -DgroupId=com.pragmaticqa.tests -DartifactId=functionalTests`</p>

<p>You will notice maven doing its magic and creating a directory structure for you. Once it is complete do a list in the current working directory and you will notice a directory called functionalTests in your workspace. The directory structure will be as follows.</p>

<pre><code>|-functionalTests
|--src
|----main
|------java
|--------com
|----------pragmaticqa
|------------tests
|----test
|------java
|--------com
|----------pragmaticqa
|------------tests
</code></pre>

<p>There is a debate going on these days about Convention over Configuration. Maven off course support Convention rather than project specific configuration. The structure of a maven project will always be similar to the structure shown above. All the application specific code resides in the src/main directory and the tests will be in the src/test directory with their respective resources.</p>

<p>In any maven project POM plays an important part in organizing the project phases and project dependencies. The contents of the sample POM in the functionalTest project are as follows.</p>

<p>I would highly recommend that you familiarize yourself with some basic concepts of maven like packaging, artifacts and version information. Clearly from the POM file below, the version of our application is 1.0-SNAPSHOT and the artifiact ID is functionalTests.</p>

<p>We are interested in the dependencies, in this section you can define the external modules or other projects that you need to make available to your project. In our case we are interested in adding TestNG and Selenium RC support to our project. Therefore we will remove the JUnit dependency and add TestNG and Selenium RC. After doing this our POM contents will be as follows.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang: pom.xml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.pragmaticqa.tests<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>functionalTests<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>functionalTests<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;url&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://maven.apache.org&quot;</span><span class="nt">&gt;</span>http://maven.apache.org<span class="nt">&lt;/a&gt;&lt;/url&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;dependencies&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>dependency<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.testng<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>testng<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>classifier<span class="ni">&amp;gt;</span>jdk15<span class="ni">&amp;lt;</span>/classifier<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>5.11<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/dependency<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>dependency<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.seleniumhq.selenium.client-drivers<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>selenium-java-client-driver<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>1.0.3<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/dependency<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/dependencies&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>build<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>plugins<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>             <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.apache.maven.plugins<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'>             <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>maven-compiler-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>source<span class="ni">&amp;gt;</span>1.5<span class="ni">&amp;lt;</span>/source<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>target<span class="ni">&amp;gt;</span>1.5<span class="ni">&amp;lt;</span>/target<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.codehaus.mojo<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>selenium-maven-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>executions<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>execution<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>phase<span class="ni">&amp;gt;</span>pre-integration-test<span class="ni">&amp;lt;</span>/phase<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>goals<span class="ni">&amp;gt;</span>
</span><span class='line'>                        <span class="ni">&amp;lt;</span>goal<span class="ni">&amp;gt;</span>start-server<span class="ni">&amp;lt;</span>/goal<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>/goals<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>                        <span class="ni">&amp;lt;</span>background<span class="ni">&amp;gt;</span>true<span class="ni">&amp;lt;</span>/background<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>/configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>/execution<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>execution<span class="ni">&amp;gt;</span>
</span><span class='line'>                      <span class="ni">&amp;lt;</span>id<span class="ni">&amp;gt;</span>stop-selenium<span class="ni">&amp;lt;</span>/id<span class="ni">&amp;gt;</span>
</span><span class='line'>                      <span class="ni">&amp;lt;</span>phase<span class="ni">&amp;gt;</span>post-integration-test<span class="ni">&amp;lt;</span>/phase<span class="ni">&amp;gt;</span>
</span><span class='line'>                      <span class="ni">&amp;lt;</span>goals<span class="ni">&amp;gt;</span>
</span><span class='line'>                          <span class="ni">&amp;lt;</span>goal<span class="ni">&amp;gt;</span>stop-server<span class="ni">&amp;lt;</span>/goal<span class="ni">&amp;gt;</span>
</span><span class='line'>                      <span class="ni">&amp;lt;</span>/goals<span class="ni">&amp;gt;</span>
</span><span class='line'>                  <span class="ni">&amp;lt;</span>/execution<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/executions<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.apache.maven.plugins<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>maven-surefire-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>!-- Skip the normal tests, we&#39;ll run them in the integration-test phase --<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>skip<span class="ni">&amp;gt;</span>true<span class="ni">&amp;lt;</span>/skip<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="ni">&amp;lt;</span>executions<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>execution<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>phase<span class="ni">&amp;gt;</span>integration-test<span class="ni">&amp;lt;</span>/phase<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>goals<span class="ni">&amp;gt;</span>
</span><span class='line'>                        <span class="ni">&amp;lt;</span>goal<span class="ni">&amp;gt;</span>test<span class="ni">&amp;lt;</span>/goal<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>/goals<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>                        <span class="ni">&amp;lt;</span>skip<span class="ni">&amp;gt;</span>false<span class="ni">&amp;lt;</span>/skip<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>/configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>/execution<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/executions<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/plugins<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/build<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Modify AppTest.java to make it a valid Selenium â€“ TestNG test as shown below.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang: AppTest.java</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">pragmaticqa</span><span class="o">.</span><span class="na">tests</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">com.thoughtworks.selenium.DefaultSelenium</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.testng.annotations.AfterClass</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.testng.annotations.BeforeClass</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.testng.annotations.Test</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">testng</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">testng</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Unit</span> <span class="n">test</span> <span class="k">for</span> <span class="n">simple</span> <span class="n">App</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppTest</span>
</span><span class='line'><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">DefaultSelenium</span> <span class="n">selenium</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@BeforeClass</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">selenium</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultSelenium</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">,</span><span class="mi">4444</span><span class="o">,</span><span class="s">&quot;*firefox&quot;</span><span class="o">,</span><span class="s">&quot;http://www.google.com/&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">selenium</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testApp</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">selenium</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">selenium</span><span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">,</span><span class="s">&quot;Selenium&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">selenium</span><span class="o">.</span><span class="na">click</span><span class="o">(</span><span class="s">&quot;btnG&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">selenium</span><span class="o">.</span><span class="na">getTitle</span><span class="o">(),</span> <span class="s">&quot;Google&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@AfterClass</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">tearDown</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">selenium</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The setup is complete and you can test the setup by opening up a terminal and go the functionalTests directory. Once you are in the directory do the following.</p>

<p>  mvn integration-test</p>

<p>You will see maven running the tests and once the maven process is complete you will have an output like this.</p>

<pre><code>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 16.382 sec
Results :
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 23 seconds
[INFO] Finished at: Thu May 20 21:38:45 BST 2010
[INFO] Final Memory: 25M/80M
[INFO] ------------------------------------------------------------------------
</code></pre>

<p>I hope this helps people in getting started with Maven, Selenium and TestNG.</p>

<p>Happy testing!!!!</p>
]]></content>
  </entry>
  
</feed>
